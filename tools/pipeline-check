#!/usr/bin/env bash

# This is probably getting too complex for jq now.
# If I used go/python for this I'd also augment the output of each stage with the code
# commit hash and message used for each execution.  As it stands this needs to run in a
# separate command.

if [ -z "$1" ]; then
	echo "provide a pipeline name as the first argument"
	exit 1
fi

aws codepipeline get-pipeline-state \
	--name "$1" | tee /tmp/pipeline-check.json | jq '
    {pipelineName, updated, stages: [
        .stageStates[] | select(.latestExecution.status) |
        if ( .stageName == "Source") and (.latestExecution.status == "Succeeded")  then
            { stageName , status: .latestExecution.status,
                sources: [
                    .actionStates[] |
                        if (.latestExecution != null) and ( .latestExecution.summary|startswith("{") ) then
                            {
                                actionName, lastStatusChange: .latestExecution.lastStatusChange,
                                msg: .latestExecution.summary | fromjson |
                                    .CommitMessage|split("\n")[0],
                            }
                        else
                            {
                                actionName, lastStatusChange: .latestExecution.lastStatusChange,
                                msg: .latestExecution.summary
                            }
                        end
                ]
            }
        elif .latestExecution.status == "Succeeded" then
            { stageName , status: .latestExecution.status,
                pipelineExecutionId: .latestExecution.pipelineExecutionId,
                time: [ .actionStates[].latestExecution.lastStatusChange | select(. != null ) ] | sort | .[-1] ,
            }
        else
            { stageName, status: .latestExecution.status,
                pipelineExecutionId: .latestExecution.pipelineExecutionId,
                actions: [ .actionStates[]? | select(.latestExecution.status) |
                if .latestExecution.status == "Failed" then
                    { actionName , status: .latestExecution.status,
                    summary: .latestExecution.summary,
                    message: .latestExecution.errorDetails.message? ,
                    time: .latestExecution.lastStatusChange? ,
                    executionId: .latestExecution.actionExecutionId,
                    url: .latestExecution.externalExecutionUrl,
                } | delpaths([. | to_entries | .[] | select(.value == null) | [.key]])
                elif .latestExecution.status == "InProgress" then
                    { actionName , status: .latestExecution.status,
                    token: .latestExecution.token,
                    }
                else
                    { actionName , status: .latestExecution.status }
                end
            ] }
        end
        ]
    }
'

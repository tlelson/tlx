#!/usr/bin/env python

""" Org Tree
    Returns JSON tree or the entire organisations including accounts, SCPs
    and Organisation Units at each level.


    TODO:
        - Query AWS concurrently to improve speed âœ“
        - Consider filtering AccountTypeDef to just account names and id
        - Consider filtering SCPs to just names and id

    Wild Dream:
        - Is there a way of merging all SCP's for an account to get an applied
            policy?
        - if so, is it possible to do this and have a source policy for each
            statement?
"""


from concurrent.futures import ThreadPoolExecutor as TPE
import asyncio
from typing import TypedDict, List, Union
import boto3
import json
import logging

# python -m pip install 'boto3-stubs[essential]'
# python -m pip install 'boto3-stubs[organizations]'
from mypy_boto3_organizations.type_defs import (
    OrganizationalUnitTypeDef,
    AccountTypeDef,
    PolicySummaryTypeDef,
)
from mypy_boto3_organizations.client import OrganizationsClient

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger()

session = boto3.Session()
org: OrganizationsClient = session.client('organizations')


# Define a string literal for self-referencing type
OrgUnitType = Union['OrgUnit', None]


class OrgUnit(TypedDict):
    Name: str
    Id: str
    Arn: str
    Accounts: List[AccountTypeDef]
    SCPs: List[PolicySummaryTypeDef]
    OrgUnits: List[OrgUnitType]


def scps(parent_id) -> List[PolicySummaryTypeDef]:
    return org.list_policies_for_target(
        TargetId=parent_id,
        Filter='SERVICE_CONTROL_POLICY')["Policies"]


def accounts(parent_id) -> List[AccountTypeDef]:
    return org.list_accounts_for_parent(ParentId=parent_id)["Accounts"]


def org_units(parent_id) -> List[OrganizationalUnitTypeDef]:
    return org.list_organizational_units_for_parent(
        ParentId=parent_id)["OrganizationalUnits"]


def _check_keys(parent):
    if any(key not in parent for key in ("Id", "Name", "Arn")):
        raise Exception("Invalid Parent: ", parent)


async def build_unit(
    executor: TPE,
    parent: OrganizationalUnitTypeDef,
) -> OrgUnit:
    _check_keys(parent)

    # Fetch accounts and SCPs concurrently
    loop = asyncio.get_event_loop()
    go = loop.run_in_executor
    acts_task = go(executor, accounts, parent["Id"])  # type: ignore
    scps_task = go(executor, scps, parent["Id"])  # type: ignore
    orgs_task = go(executor, org_units, parent["Id"])  # type: ignore

    # Recursively build OrgUnit for each organizational unit
    tasks = []
    for ou in await orgs_task:
        _check_keys(ou)
        task = build_unit(executor, ou)
        tasks.append(task)

    return {
        "Name": parent["Name"],  # type: ignore
        "Id": parent["Id"],  # type: ignore
        "Arn": parent["Arn"],  # type: ignore
        "Accounts": await acts_task,
        "SCPs": await scps_task,
        "OrgUnits": await asyncio.gather(*tasks),
    }


async def main(executor: TPE):
    tree: List[OrgUnit] = []

    roots = org.list_roots()["Roots"]
    tasks = []

    for root in roots:
        task = build_unit(executor, root)
        tasks.append(task)

    # Gather all tasks and build the tree
    tree = await asyncio.gather(*tasks)
    print(json.dumps(tree, default=str, sort_keys=False))


if __name__ == "__main__":
    """
    time python org-tree-async > /tmp/org-tree-async.json

    Without ThreadPoolExecutor (i.e boto calls block)
        real    0m55.824s ... this is no faster than the non-async version
    With ThreadPoolExecutor (Doing Org syncronously tho)
        real    0m19.565s
    Now doing Org concurrently too
        real    0m10.023s
    """

    asyncio.run(main(TPE(max_workers=10)))
